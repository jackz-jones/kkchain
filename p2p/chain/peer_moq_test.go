// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package chain

import (
	"github.com/invin/kkchain/common"
	"sync"
)

var (
	lockPeerMockrequestBlocksByNumber  sync.RWMutex
	lockPeerMockrequestHeadersByHash   sync.RWMutex
	lockPeerMockrequestHeadersByNumber sync.RWMutex
)

// PeerMock is a mock implementation of Peer.
//
//     func TestSomethingThatUsesPeer(t *testing.T) {
//
//         // make and configure a mocked Peer
//         mockedPeer := &PeerMock{
//             requestBlocksByNumberFunc: func(origin uint64, amount int) error {
// 	               panic("TODO: mock out the requestBlocksByNumber method")
//             },
//             requestHeadersByHashFunc: func(origin common.Hash, amount int, skip int, reverse bool)  {
// 	               panic("TODO: mock out the requestHeadersByHash method")
//             },
//             requestHeadersByNumberFunc: func(origin uint64, amount int, skip int, reverse bool) error {
// 	               panic("TODO: mock out the requestHeadersByNumber method")
//             },
//         }
//
//         // TODO: use mockedPeer in code that requires Peer
//         //       and then make assertions.
//
//     }
type PeerMock struct {
	// requestBlocksByNumberFunc mocks the requestBlocksByNumber method.
	requestBlocksByNumberFunc func(origin uint64, amount int) error

	// requestHeadersByHashFunc mocks the requestHeadersByHash method.
	requestHeadersByHashFunc func(origin common.Hash, amount int, skip int, reverse bool)

	// requestHeadersByNumberFunc mocks the requestHeadersByNumber method.
	requestHeadersByNumberFunc func(origin uint64, amount int, skip int, reverse bool) error

	// calls tracks calls to the methods.
	calls struct {
		// requestBlocksByNumber holds details about calls to the requestBlocksByNumber method.
		requestBlocksByNumber []struct {
			// Origin is the origin argument value.
			Origin uint64
			// Amount is the amount argument value.
			Amount int
		}
		// requestHeadersByHash holds details about calls to the requestHeadersByHash method.
		requestHeadersByHash []struct {
			// Origin is the origin argument value.
			Origin common.Hash
			// Amount is the amount argument value.
			Amount int
			// Skip is the skip argument value.
			Skip int
			// Reverse is the reverse argument value.
			Reverse bool
		}
		// requestHeadersByNumber holds details about calls to the requestHeadersByNumber method.
		requestHeadersByNumber []struct {
			// Origin is the origin argument value.
			Origin uint64
			// Amount is the amount argument value.
			Amount int
			// Skip is the skip argument value.
			Skip int
			// Reverse is the reverse argument value.
			Reverse bool
		}
	}
}

// requestBlocksByNumber calls requestBlocksByNumberFunc.
func (mock *PeerMock) requestBlocksByNumber(origin uint64, amount int) error {
	if mock.requestBlocksByNumberFunc == nil {
		panic("PeerMock.requestBlocksByNumberFunc: method is nil but Peer.requestBlocksByNumber was just called")
	}
	callInfo := struct {
		Origin uint64
		Amount int
	}{
		Origin: origin,
		Amount: amount,
	}
	lockPeerMockrequestBlocksByNumber.Lock()
	mock.calls.requestBlocksByNumber = append(mock.calls.requestBlocksByNumber, callInfo)
	lockPeerMockrequestBlocksByNumber.Unlock()
	return mock.requestBlocksByNumberFunc(origin, amount)
}

// requestBlocksByNumberCalls gets all the calls that were made to requestBlocksByNumber.
// Check the length with:
//     len(mockedPeer.requestBlocksByNumberCalls())
func (mock *PeerMock) requestBlocksByNumberCalls() []struct {
	Origin uint64
	Amount int
} {
	var calls []struct {
		Origin uint64
		Amount int
	}
	lockPeerMockrequestBlocksByNumber.RLock()
	calls = mock.calls.requestBlocksByNumber
	lockPeerMockrequestBlocksByNumber.RUnlock()
	return calls
}

// requestHeadersByHash calls requestHeadersByHashFunc.
func (mock *PeerMock) requestHeadersByHash(origin common.Hash, amount int, skip int, reverse bool) {
	if mock.requestHeadersByHashFunc == nil {
		panic("PeerMock.requestHeadersByHashFunc: method is nil but Peer.requestHeadersByHash was just called")
	}
	callInfo := struct {
		Origin  common.Hash
		Amount  int
		Skip    int
		Reverse bool
	}{
		Origin:  origin,
		Amount:  amount,
		Skip:    skip,
		Reverse: reverse,
	}
	lockPeerMockrequestHeadersByHash.Lock()
	mock.calls.requestHeadersByHash = append(mock.calls.requestHeadersByHash, callInfo)
	lockPeerMockrequestHeadersByHash.Unlock()
	mock.requestHeadersByHashFunc(origin, amount, skip, reverse)
}

// requestHeadersByHashCalls gets all the calls that were made to requestHeadersByHash.
// Check the length with:
//     len(mockedPeer.requestHeadersByHashCalls())
func (mock *PeerMock) requestHeadersByHashCalls() []struct {
	Origin  common.Hash
	Amount  int
	Skip    int
	Reverse bool
} {
	var calls []struct {
		Origin  common.Hash
		Amount  int
		Skip    int
		Reverse bool
	}
	lockPeerMockrequestHeadersByHash.RLock()
	calls = mock.calls.requestHeadersByHash
	lockPeerMockrequestHeadersByHash.RUnlock()
	return calls
}

// requestHeadersByNumber calls requestHeadersByNumberFunc.
func (mock *PeerMock) requestHeadersByNumber(origin uint64, amount int, skip int, reverse bool) error {
	if mock.requestHeadersByNumberFunc == nil {
		panic("PeerMock.requestHeadersByNumberFunc: method is nil but Peer.requestHeadersByNumber was just called")
	}
	callInfo := struct {
		Origin  uint64
		Amount  int
		Skip    int
		Reverse bool
	}{
		Origin:  origin,
		Amount:  amount,
		Skip:    skip,
		Reverse: reverse,
	}
	lockPeerMockrequestHeadersByNumber.Lock()
	mock.calls.requestHeadersByNumber = append(mock.calls.requestHeadersByNumber, callInfo)
	lockPeerMockrequestHeadersByNumber.Unlock()
	return mock.requestHeadersByNumberFunc(origin, amount, skip, reverse)
}

// requestHeadersByNumberCalls gets all the calls that were made to requestHeadersByNumber.
// Check the length with:
//     len(mockedPeer.requestHeadersByNumberCalls())
func (mock *PeerMock) requestHeadersByNumberCalls() []struct {
	Origin  uint64
	Amount  int
	Skip    int
	Reverse bool
} {
	var calls []struct {
		Origin  uint64
		Amount  int
		Skip    int
		Reverse bool
	}
	lockPeerMockrequestHeadersByNumber.RLock()
	calls = mock.calls.requestHeadersByNumber
	lockPeerMockrequestHeadersByNumber.RUnlock()
	return calls
}
